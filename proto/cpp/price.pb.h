// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: price.proto

#ifndef PROTOBUF_INCLUDED_price_2eproto
#define PROTOBUF_INCLUDED_price_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_price_2eproto 

namespace protobuf_price_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_price_2eproto
namespace price {
class ItemID;
class ItemIDDefaultTypeInternal;
extern ItemIDDefaultTypeInternal _ItemID_default_instance_;
class ItemPrice;
class ItemPriceDefaultTypeInternal;
extern ItemPriceDefaultTypeInternal _ItemPrice_default_instance_;
}  // namespace price
namespace google {
namespace protobuf {
template<> ::price::ItemID* Arena::CreateMaybeMessage<::price::ItemID>(Arena*);
template<> ::price::ItemPrice* Arena::CreateMaybeMessage<::price::ItemPrice>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace price {

// ===================================================================

class ItemID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:price.ItemID) */ {
 public:
  ItemID();
  virtual ~ItemID();

  ItemID(const ItemID& from);

  inline ItemID& operator=(const ItemID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemID(ItemID&& from) noexcept
    : ItemID() {
    *this = ::std::move(from);
  }

  inline ItemID& operator=(ItemID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemID* internal_default_instance() {
    return reinterpret_cast<const ItemID*>(
               &_ItemID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ItemID* other);
  friend void swap(ItemID& a, ItemID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemID* New() const final {
    return CreateMaybeMessage<ItemID>(NULL);
  }

  ItemID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ItemID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ItemID& from);
  void MergeFrom(const ItemID& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:price.ItemID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_price_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ItemPrice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:price.ItemPrice) */ {
 public:
  ItemPrice();
  virtual ~ItemPrice();

  ItemPrice(const ItemPrice& from);

  inline ItemPrice& operator=(const ItemPrice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemPrice(ItemPrice&& from) noexcept
    : ItemPrice() {
    *this = ::std::move(from);
  }

  inline ItemPrice& operator=(ItemPrice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemPrice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemPrice* internal_default_instance() {
    return reinterpret_cast<const ItemPrice*>(
               &_ItemPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ItemPrice* other);
  friend void swap(ItemPrice& a, ItemPrice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemPrice* New() const final {
    return CreateMaybeMessage<ItemPrice>(NULL);
  }

  ItemPrice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ItemPrice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ItemPrice& from);
  void MergeFrom(const ItemPrice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemPrice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  float price() const;
  void set_price(float value);

  // @@protoc_insertion_point(class_scope:price.ItemPrice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_price_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ItemID

// int64 ID = 1;
inline void ItemID::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ItemID::id() const {
  // @@protoc_insertion_point(field_get:price.ItemID.ID)
  return id_;
}
inline void ItemID::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:price.ItemID.ID)
}

// -------------------------------------------------------------------

// ItemPrice

// float price = 1;
inline void ItemPrice::clear_price() {
  price_ = 0;
}
inline float ItemPrice::price() const {
  // @@protoc_insertion_point(field_get:price.ItemPrice.price)
  return price_;
}
inline void ItemPrice::set_price(float value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:price.ItemPrice.price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace price

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_price_2eproto
